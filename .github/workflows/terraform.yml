name: Terraform Deploy (MVP)

on:
  push:
    branches: [ "main" ]
  pull_request:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: eu-west-3
  TF_WORKING_DIR: infra-terraform

concurrency:
  group: awspayments-terraform
  cancel-in-progress: true

jobs:
  tf:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::982534393012:role/GitHubActionsCdkDeployRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5

      - name: Terraform Init (remote backend)
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init -input=false -reconfigure

      - name: Terraform Plan (PR only)
        if: github.event_name == 'pull_request'
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform plan -input=false -no-color -var="region=${{ env.AWS_REGION }}" -var="code_version=${{ github.sha }}"

      - name: Terraform Destroy (⚠️ wipes everything)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform destroy -input=false -auto-approve -lock-timeout=5m -var="region=${{ env.AWS_REGION }}" -var="code_version=${{ github.sha }}"

      - name: Terraform Apply (fresh create)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform apply -input=false -auto-approve -lock-timeout=5m -var="region=${{ env.AWS_REGION }}" -var="code_version=${{ github.sha }}"

      - name: Show Outputs
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform output -json | jq -r '.api_url.value'
